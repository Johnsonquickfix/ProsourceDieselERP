
@{
    ViewBag.Title = "Flows";
    Layout = "~/Views/Shared/_qfk_Layout.cshtml";
}

<!-- DataTables -->
<link href="~/Content/AdminLTE-3.1.0/datatables/DataTables-1.10.20/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
<link href="~/Content/AdminLTE-3.1.0/datatables/Buttons-1.6.1/css/buttons.dataTables.min.css" rel="stylesheet" />
<!-- datatables js -->
<script src="~/Content/AdminLTE-3.1.0/datatables/datatables.min.js" type="text/javascript"></script>
<script src="~/Content/AdminLTE-3.1.0/datatables/DataTables-1.10.20/js/dataTables.bootstrap4.min.js" type="text/javascript"></script>
<div id="root">
    <!-- start page title -->
    <div class="row">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <div>
                    <h4 class="title">Flows</h4>
                </div>
                <div class="page-title-right">
                    <button name="add-flow" class="btn btn-outline-dark">Create flow</button>
                </div>

            </div>
        </div>
    </div>
    <!-- end page title -->
    <div class="row">
        <div class="col-12">
            <div class="card boxed_style">
                <div class="card-body">
                    <table id="datatable" class="table dt-responsive w-100 align-middle">
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="modalAdd" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">Create flow</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>
<script src="~/js/qfk/common.js"></script>
<script type="module">
    import Http from '@Url.Content("~/js/http/index.js")';
    import flowConfig, { loader } from '@Url.Content("~/js/qfk/flows/flowconfig.js")';

    var doc = doc || document, lt = {};
    doc.addEventListener("DOMContentLoaded", function () {
        lt = flowConfig(1000); loaddata();
    });


    document.querySelector('[name="add-flow"]')?.addEventListener('click', (event) => {
        event.preventDefault();
        let _m = document.querySelector('#modalAdd'), myModal = new bootstrap.Modal(_m);
        _m.querySelector('.modal-title').innerHTML = 'Create Flow';
        // Add body
        let l = document.createElement('label', { class: "form-label" }, 'Name'),
            t = document.createElement('input', { class: "form-control", type: "text", placeholder: "e.g. Welcome series, Post purchase" });
        _m.querySelector('.modal-body').replaceChildren(l,t);
        // Add footer
        let c = document.createElement('button', { type: "button", class: "btn btn-secondary waves-effect", 'data-bs-dismiss': "modal" }, 'Close'),
            a = document.createElement('button', { type: "button", class: "btn btn-primary" }, 'Create flow');
        _m.querySelector('.modal-footer').replaceChildren(c, a);
        myModal.show(); t.focus();

        a.addEventListener('click', (evt) => {
            evt.preventDefault();
            if (t.value === '') { t.focus(); return false; };
            evt.target.disabled = true;
            Http.post(`/api/flow/create`, { params: {}, body: { name: t.value, trigger_type: 2 } }).then(response => response.json()).
                then(response => {
                    window.location = `${window.location.origin}/flows/${response.id}/edit`;
                    //myModal.hide();
                }).catch(error => {
                    console.log('error', error);
                    evt.target.disabled = false;
                    swal('Error!', error, 'error');
                });
        });
    });

    function loaddata() {
        let option = { page: 0, size: 10, order_by: 'name', order_asc: true }
        $('#datatable').DataTable({
            lengthMenu: [[10, 20, 50, 100], [10, 20, 50, 100]], order: [[0, "asc"]],
            destroy: true, bProcessing: true, responsive: false, bServerSide: true, bAutoWidth: true, scrollX: false,
            language: {
                lengthMenu: "_MENU_ per page", zeroRecords: "Sorry no records found", info: "Showing <b>_START_ to _END_</b> of _TOTAL_",
                infoFiltered: "", infoEmpty: "No records found", processing: '<i class="fa fa-spinner fa-spin fa-3x fa-fw"></i>'
            },
            sAjaxSource: lt.urls.getFlowsList,
            fnServerData: function (sSource, aoData, fnCallback, oSettings) {
                if (oSettings.aaSorting.length > 0) { aoData.push({ name: "sSortColName", value: oSettings.aoColumns[oSettings.aaSorting[0][0]].data }); }
                option.page = oSettings._iDisplayStart;
                option.size = oSettings._iDisplayLength;
                option.order_by = aoData.find(el => el.name === "sSortColName").value;
                option.order_asc = (aoData.find(el => el.name === "sSortDir_0").value==="asc");

                oSettings.jqXHR = Http.get(sSource, { params: option }).then(response => response.json())
                    .then(res => {
                        return fnCallback({ sEcho: aoData.find(el => el.name === "sEcho").value, recordsTotal: res.total_items, recordsFiltered: res.total_items, aaData: res.flows });
                    });
            },
            columns: [
                {
                    data: 'name', title: 'Flow', sWidth: "30%", orderable: false, render: function (data, type, row, meta) {
                        return `<div class=""><a data-add="false" href="/flows/${row.id}/edit">${data}</a> </div>${row.trigger_type === 0 ? row.trigger_name || '' : (row.trigger_type === 1 ? row.trigger_group || '' : (row.trigger_type === 2 ? row.trigger_customer_property || '' : ''))}`;
                    }
                },
                //{ data: 'group_type_name', title: 'Type', sWidth: "10%", class: '', orderable: false, render: function (data, type, row, meta) { return `<span class="bg-primary bg-soft text-primary badge font-size-12 me-2"><i class="fas ${row.group_type_id === 1 ? 'fa-list-ul' : 'fa-bolt'}"></i> ${row.group_type_name}</span>`; } },
                { data: 'status', title: 'status', sWidth: "10%", class: 'text-end', orderable: false, render: function (data, type, row, meta) { return `<span class="bg-primary bg-soft text-primary badge font-size-12 me-2"><i class="fas fa-bolt"></i> ${data}</span>`; } },
                { data: 'updated', title: 'Last updated', sWidth: "15%", render: function (data, type, full, meta) { return moment(data).format('MMMM Do YYYY, h:mm A'); } },
                { data: 'conversion', title: 'Revenue', sWidth: "15%", class: 'text-end',render: $.fn.dataTable.render.number(',', '.', 2, '$')},
                { data: 'conversion_per_recipient', title: 'Revenue per recipient', sWidth: "15%", class: 'text-end',render: $.fn.dataTable.render.number(',', '.', 2, '$')},
                { data: 'id', title: '', sWidth: "5%", orderable: false, render: function (data, type, row, meta) { return ''; } }
            ]
        });
    }

</script>

