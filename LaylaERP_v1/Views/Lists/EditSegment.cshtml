@{
    ViewBag.Title = "Lists & Segments";
    Layout = "~/Views/Shared/_qfk_Layout.cshtml";
}

<div id="root">
    <!-- start page title -->
    <div class="row border-bottom">
        <div class="col-12">
            <div class="page-title-box d-sm-flex align-items-center justify-content-between">
                <div>
                    <ol class="breadcrumb m-0 font-size-18">
                        <li class="breadcrumb-item"><a href="/lists/index">Lists & Segments</a></li>
                        <li class="breadcrumb-item">

                            <span class="bg-primary bg-soft text-primary badge font-size-12 me-2"><i class="fas fa-bolt me-2"></i>Segment</span>
                        </li>
                        <li class="breadcrumb-item">@ViewBag.mode Definition</li>
                    </ol>
                </div>
                <div class="page-title-right">
                </div>
            </div>
        </div>
    </div>
    <!-- end page title -->
    <form class="row needs-validation" novalidate>
        <div class="col-xl-12">
            <p>Segments allow you to track and analyze people who meet certain conditions</p>
            <div class="row mb-4">
                <div class="col-lg-8">
                    <div>
                        <label class="form-label">
                            Name
                        </label>
                        <input id="txtlist-name" class="form-control" type="text" placeholder="Segment Name" value="">
                    </div>
                </div>
            </div>

            <div>
                <span class="h4_title">Definition</span>
                <div id="definition">
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12 text-end">
                    <a data-add="true" href="~/lists/index" class="btn btn-primary">Cancel</a>
                    @*@if (ViewBag.mode == "Edit")
                        {
                            <button id="create-Segments" class="btn btn-primary" data-company-key="@om.public_api_key" data-id="@ViewBag.id">Create Segment</button>
                        }
                        else if (ViewBag.mode == "Clone")
                        {
                            <button id="create-Segments" class="btn btn-primary" data-company-key="@om.public_api_key" data-id="0">Clone Segment</button>
                        }*@
                </div>
            </div>
        </div>
    </form>

</div>
<script src="~/js/qfk/common.js"></script>
<script type="module">
    import segments, { __criteria, __tags, createCriteria, addFilter, createFilterRow, createOperatorValue, addTimeFrame } from '@Url.Content("~/js/qfk/lists/segment.js?v=" + DateTime.Now.ToString("ddMMyyyymmss"))';
    //segments();



    let _d = document, loadData = function () {
        //console.log('start');
        //console.log('end');
        fetch(`/api/lists/@ViewBag.id`, { method: 'GET', headers: { 'Content-Type': 'application/json;charset=UTF-8' } }).then(response => response.json())
            .then(function (result) {
                console.log(result);
                _d.getElementById("txtlist-name").value = result.list_name;
                let $def = _d.getElementById("definition"), groups = [], $type = null, $statistic = null, $operator = null, $timeFrame = null;
                _d.getElementById("definition").replaceChildren();
                result.definition.forEach((container, iContainer) => {

                    //__criteria
                    container.criteria.forEach((row, iRow) => {
                        if (iRow <= 0) {
                            let dr = _d.createElement('div', { class: 'definition-row d-flex', }),
                                _and = _d.createElement('button', { name: 'add-definition', class: 'btn btn-outline-dark fw-bold' }, '<i class="fa fa-plus"></i> AND');
                            _and.addEventListener("click", function (evt) { evt.preventDefault(), evt.stopPropagation(); this.disabled = true, addDefinition(); });
                            createCriteria(dr, row.type), $def.appendChild(_d.createElement('div', { class: 'definition__container mb-2', }, _d.createElement('div', { class: 'boxed_style card card-body my-2' }, dr), _and));
                            $type = dr.querySelector('[name="type"]'), addFilter($type, row);
                            $statistic = dr.querySelector('.definition-col'), ($statistic) && createFilterRow($statistic, row.statistic);
                            $operator = dr.querySelector('[name="operator"]'), ($operator && __tags[1000] == row.type) && createOperatorValue($operator, row);
                            $timeFrame = dr.querySelector('[name="timeframe"]'), $timeFrame && addTimeFrame($timeFrame, row);
                            console.log($statistic)

                            //addDefinition();
                            //groups = [..._d.getElementById("definition").children];
                            //const _type = groups[iRow].querySelector('[name="type"]');
                            //if (_type.tagName == 'SELECT') {
                            //    const choiceItems = _type.closest(".choices").querySelectorAll(".choices__item--selectable");
                            //    for (let i = 0; i < choiceItems.length; i++) {
                            //        if (choiceItems[i].dataset.value === row.type) {
                            //            //choiceItems[i].dispatchEvent(new Event('mousedown'));
                            //            choiceItems[i].dispatchEvent(new Event('change', { bubbles: true }));
                            //        }
                            //    }
                            //}
                            //groups[0].querySelector('[name="type"]').setChoiceByValue('customer-attribute')
                        }
                        else {
                            let _row = [...$def.children][iContainer],pr = _row.querySelector('.definition__container .card-body'), dr = _d.createElement('div', { class: 'definition-row d-flex', });
                            createCriteria(dr, row.type),
                                pr.append(
                                    _d.createElement('div', { class: 'CriterionDivider' },
                                        _d.createElement('div', { class: 'BoxedPlaceholder__Container me-3' }, _d.createElement('div', null, _d.createElement('span', { class: "h4_title" }, 'OR'))),
                                        _d.createElement('div', { class: 'CriterionDivider__LineContainer flex-grow-1' }, _d.createElement('div'), _d.createElement('div'))
                                    )
                                ), pr.append(dr);
                            $type = dr.querySelector('[name="type"]'), addFilter($type, row);
                            $operator = dr.querySelector('[name="operator"]'), ($operator && __tags[1000] == row.type) && createOperatorValue($operator, row);
                            $timeFrame = dr.querySelector('[name="timeFrame"]'), $timeFrame && addTimeFrame($timeFrame, row);

                        }
                        //console.log(groups)
                    });
                    //console.log(criteria);
                });
                //t.disabled = false;
                //if (parseInt(result.list_id) > 0) window.location = window.location.origin + `/list/${result.list_id}/members`;
                //else swal('Error!', result.message, 'error');
            }).catch(error => {
                console.log('error', error); //swal('Error!', error, 'error');
            });
    };
    var load = function () { loadData(); }();
</script>