
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_qfk_Layout.cshtml";
    //Layout = "~/Views/Shared/_qfk_React_Layout.cshtml";
}
<!-- DataTables -->
<link href="~/Content/AdminLTE-3.1.0/datatables/DataTables-1.10.20/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
<link href="~/Content/AdminLTE-3.1.0/datatables/Buttons-1.6.1/css/buttons.dataTables.min.css" rel="stylesheet" />
<!-- datatables js -->
<script src="~/Content/AdminLTE-3.1.0/datatables/datatables.min.js" type="text/javascript"></script>
<script src="~/Content/AdminLTE-3.1.0/datatables/DataTables-1.10.20/js/dataTables.bootstrap4.min.js" type="text/javascript"></script>
<link href="~/Content/qfk/Selectr/selectr.min.css" rel="stylesheet" />
<script src="~/Content/qfk/Selectr/selectr.min.js"></script>
<div id="root">
</div>

<script src="~/js/qfk/common.js"></script>
@*<script type="text/babel" data-presets="react" data-type="module" data-plugins="transform-modules-umd" src="~/js/qfk/forms/form.jsx"></script>*@
<!--
    <script type="text/babel" data-presets="react" data-type="module" src="~/js/qfk/forms/form.jsx"></script>
    -->

<script type="module">
    import Http from '@Url.Content("~/js/http/index.js")';
    var e = e || document;
    e.addEventListener("DOMContentLoaded", function () {
        inti(), loaddata();
    });
    function inti() {
        let r = e.querySelector('#root');
        r.replaceChildren(
            e.createElement('div', { class: "page-header" },
                e.createElement('div', { class: "breadcrumb-bar" },
                    e.createElement('a', { href: "index", class: "crumb" }, 'Sign-up forms'),
                    e.createElement('span', { class: "icon-wrapper" }, e.createElement('i', { class: "fa fa-angle-right fa-lg" })),
                    e.createElement('a', { class: "crumb" }, 'Create Form')
                ),
                e.createElement('div', { class: "" },
                    e.createElement('input', { class: "white_btn", type: "button", value: "Create new sign-up form", click: (event) => { createForm(event); } }),
                )
            ),
            e.createElement('div', { id: "form-templates", class: "row mx-2" },
                //e.createElement('div', { class: "col-12" },
                //    e.createElement('table', { id: "form-table", class: "table dt-responsive w-100 align-middle" })
                //)
            )
        )
    }
    function createForm(event) {
        event.preventDefault();
        let mp = new ModalPopup(), _m = mp.inti('Create sign-up form'), myModal = new bootstrap.Modal(_m),
            s = e.createElement('select', { name: "list" });
       _m.querySelector('.modal-body').replaceChildren(
            e.createElement('div', { class: "InputContainer mb-2" },
                e.createElement('label', { class: "form-label" }, 'Form name'),
                e.createElement('input', { class: "form-control", type: "text", name: "name", placeholder: "e.g. Newsletter sign-up", autocomplete: "off", value: "" })
            ),
            e.createElement('div', { class: "InputContainer mb-2" },
                e.createElement('label', { class: "form-label" }, 'Which list should subscribers be added to?'),
                e.createElement('div', {}, s)
            ),
            e.createElement('div', { class: "InputContainer mb-2" },
                e.createElement('label', { class: "form-label" }, 'Choose a form type'),
                e.createElement('div', { class: "card-box mb-2" },
                    e.createElement('label', { class: "d-flex w-100" },
                        e.createElement('input', { class: "mx-4", type: "radio", id: "0277bac8-8d5b-4d03-be09-a177e4a8b116", name: "formType", value: "POPUP", checked: "" }),
                        e.createElement('div', { class: "align-self-center overflow-hidden me-auto" },
                            e.createElement('div', { class: "flex-shrink-0 align-self-center me-3" }),
                            e.createElement('div', { class: "flex-grow-1 overflow-hidden" },
                                e.createElement('h5', { class: "font-size-14 text-truncate" }, 'Popup'),
                                e.createElement('p', { class: "text-muted mb-0" }, 'Pops up in the middle of the screen')
                            )
                        )
                    )
                ),
                e.createElement('div', { class: "card-box mb-2" },
                    e.createElement('label', { class: "d-flex w-100" },
                        e.createElement('input', { class: "mx-4", type: "radio", id: "0277bac8-8d5b-4d03-be09-a177e4a8b116", name: "formType", value: "EMBED" }),
                        e.createElement('div', { class: "align-self-center overflow-hidden me-auto" },
                            e.createElement('div', { class: "flex-shrink-0 align-self-center me-3" }),
                            e.createElement('div', { class: "flex-grow-1 overflow-hidden" },
                                e.createElement('h5', { class: "font-size-14 text-truncate" }, 'Embed'),
                                e.createElement('p', { class: "text-muted mb-0" }, 'Embedded in your site. This requires adding a small snippet of code to your site where you want the form to appear')
                            )
                        )
                    )
                )
            )
        );
        let list = new Selectr(s, { data: [], searchable: !1, defaultSelected: !1, placeholder: 'Choose a list...' });
        Http.get('/api/lists/static-group?type=1').then(response => response.json()).then(function (data) { list.add(data ? data.map(function (row) { return { value: row.group_id, text: row.name } }) : []); });
        _m.querySelector('.modal-footer').replaceChildren(
            e.createElement('button', { class: "white_btn", type: "button", title: "Cancel" }, 'Cancel'),
            e.createElement('button', { class: "black_btn", type: "button", title: "Save and continue to design", click: (e) => { mp.create(e, _m) } }, 'Save and continue to design'),
        );
        myModal.show();
    }
    class ModalPopup {
        constructor(title) {
            this.inti(title);
        }
        inti(title) {
            return e.createElement('div', { class: "modal fade", tabindex: "-1" },
                e.createElement('div', { class: "modal-dialog" },
                    e.createElement('div', { class: "modal-content" },
                        e.createElement('div', { class: "modal-header" },
                            e.createElement('h5', { class: "modal-title" }, title),
                            e.createElement('button', { type: "button", class: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close" },)
                        ),
                        e.createElement('div', { class: "modal-body" }),
                        e.createElement('div', { class: "modal-footer" })
                    )
                )
            )
        }
        create(event, modal) {
            event.preventDefault(), event.stopPropagation();
            let j = {
                name: modal.querySelector('[name="name"]').value,
                list_id: parseInt(modal.querySelector('[name="list"]').value) || 0,
                form_type: modal.querySelector('[name="formType"]:checked').value
            }
            if (j.name === '') { swal('Error!', "'name' is required.", 'error').then(function () { swal.close(); modal.querySelector('[name="name"]').focus() }); return false; }
            else if (j.list_id <= 0) { swal('Error!', "'list' is required.", 'error').then(function () { swal.close(); modal.querySelector('[name="list"]').focus() }); return false; }
            else {
                Http.post('/api/form/create', { body: j })
                    .then(response => {
                        if (!response.ok) { return response.json().then(json => { throw new Error(json.message); }) }
                        else return response.json();
                    })
                    .then(response => {
                        if (response.status === 200) window.location = window.location.origin + `/forms/${response.id}/edit`
                    }).catch(error => { alert(error); });
                // ;swal('Error!', error, 'error')
            }
        }
    }
    function loaddata() {
        let d = e.querySelector('#form-templates'), option = { page: 0, size: 1000, order_by: 'name', order_asc: true },
            basePath = window.location.origin;
        Http.get('/api/form/form-templates', { params: option }).then(response => response.json())
            .then(res => {
                console.log(res)
                res.templates.forEach((v, i) => {
                    d.appendChild(
                        e.createElement('div', { class: "col-xl-6 col-sm-6" },
                            e.createElement('div', { class: "card" },
                                e.createElement('div', { class: "card-body"},
                                    e.createElement('img', { src: `..${v.image_url}`, class:"img-thumbnail" })
                                ),
                                e.createElement('div', { class: "px-4 py-3 border-top" },
                                    e.createElement('div', { class: "flex-grow-1 overflow-hidden" },
                                        e.createElement('h5', { class: "text-truncate font-size-15" }, v.name),
                                        e.createElement('p', { class: "text-muted mb-4" }, v.description)
                                    )
                                )
                            )
                        )
                    );
                });
            });
    }
</script>