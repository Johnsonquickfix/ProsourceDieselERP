
@{
    ViewBag.Title = "Edit Form";
    Layout = "~/Views/Shared/_qfk_Layout.cshtml";
    //var user = LaylaERP.UTILITIES.CommanUtilities.Provider.GetCurrent();

    //Newtonsoft.Json.Linq.JToken json_data = Newtonsoft.Json.JsonConvert.DeserializeObject<Newtonsoft.Json.Linq.JObject>(LaylaERP.BAL.qfk.FormsRepository.FormAdd("get", user.login_company_id, ViewBag.id, user.UserID, string.Empty));
    //LaylaERP.Models.qfk.Forms.Form obj = new LaylaERP.Models.qfk.Forms.Form();
    //if (json_data["status"].ToString() == "200")
    //{
    //    obj = json_data["data"].ToObject<LaylaERP.Models.qfk.Forms.Form>();
    //}
}
<link href="~/Content/qfk/Selectr/selectr.min.css" rel="stylesheet" />
<script src="~/Content/qfk/Selectr/selectr.min.js"></script>
<style>
    .editorMain {
        background: #FFFFFF;
        display: flex;
        flex-direction: row;
        justify-content: stretch;
        flex: 1 1 auto;
        overflow: hidden;
    }

        .editorMain #editor-container {
            width: 100%;
        }

            .editorMain #editor-container iframe {
                min-height: calc(100vh - 100px) !important;
            }

    .izrMui {
        -webkit-box-pack: center;
        justify-content: center;
        margin-top: 16px;
        margin-left: 24px;
        margin-right: 24px;
        background-color: rgb(223, 227, 230);
        overflow: auto;
    }
</style>
<div id="root">
</div>
<!--
    <script type="text/babel" data-presets="react" data-type="module" src="~/js/qfk/forms/form_view.jsx"></script>
-->

<script src="~/js/qfk/common.js"></script>
<script src="~/js/qfk/HtmlEditor/embed.js"></script>
<script type="module">
    import Http from '@Url.Content("~/js/http/index.js")';
    var e = e || document;
    e.addEventListener("DOMContentLoaded", async function () {
        let editor = new Editor();
        editor.init();
    });
    class Editor {
        isLoad = !1;
        baseURL = window.location.origin;
        getID() { window.location.pathname.split("/")[2] || "-1" }
        init() {
            let r = e.querySelector('#root'), id = parseInt(window.location.pathname.split("/")[2] || "-1") || 0;
            r.replaceChildren(
                e.createElement('div', { class: "page-header" },
                    e.createElement('div', { class: "breadcrumb-bar" },
                        e.createElement('a', { href: "/forms/index", class: "crumb title" }, ''),
                        //e.createElement('span', { class: "icon-wrapper" }, e.createElement('i', { class: "fa fa-angle-right fa-lg" })),
                        //e.createElement('a', { class: "crumb" }, 'Create Form')
                    ),
                    e.createElement('div', { class: "" },
                        e.createElement('input', { class: "white_btn me-2", type: "button", value: "Exit", click: (event) => { window.location = `${window.location.origin}/forms/index`; } }),
                        e.createElement('input', { class: "white_btn me-2", type: "button", value: "Publish", click: (event) => { this.saveTemplate(id, !0); } }),
                    )
                ),
                e.createElement('div', { class: "editorMain" }, e.createElement('div', { id: "editor-container" }))
            );
            this.initEditor();
        }
        initEditor() {
            let id = parseInt(window.location.pathname.split("/")[2] || "-1") || 0;
            unlayer.init({
                id: "editor-container", locale: 'en-US', displayMode: "popup", projectId: 167,//projectId: 158371,
                appearance: { panels: { tools: { dock: 'left' } } },
                tools: {
                    'custom#product_tool': {
                        //data: { products, },
                        //properties: { productLibrary: { editor: { data: { products, }, }, }, },
                    },
                },
                customCSS: [this.baseURL + "/js/qfk/HtmlEditor/product-library-tool/productTool.css"],
                customJS: [this.baseURL + "/js/qfk/HtmlEditor/product-library-tool/productTool.js"],
                mergeTags: {
                    organization: { name: 'organization.name', value: '{{ organization.name }}' },
                    organization_address: { name: 'organization.full_address', value: '{{ organization.full_address }}', },
                    organization_url: { name: 'organization.url', value: '{{ organization.url }}' },
                    unsubscribe: { name: 'unsubscribe', value: '{% unsubscribe %}' },
                    person_first_name: { name: 'first_name', value: '{{ first_name }}' },
                    person_last_name: { name: 'last_name', value: '{{ last_name }}' },
                    person_phone_number: { name: 'person.phone_number', value: '{{ person.phone_number }}' },
                    person_organization: { name: 'person.organization', value: '{{ person.organization }}' },
                    person_title: { name: 'person.title', value: '{{ person.title }}' },
                },
                editor: { confirmOnDelete: true }
            });
            unlayer.addEventListener('design:updated',  (updates) => {
                // Design is updated by the user
                if (this.isLoad) { this.saveTemplate(id,!1); }
            });
            this.loadTemplate(id);
        }
        loadTemplate(id) {
            let _title = e.querySelector('#root .page-header .title');
            Http.get(`/api/form/${id}`).then(response => response.json())
                .then((response) => {
                    //console.log(response, response.data.content.data_json)
                    if (response.status === 200) {
                        _title.innerHTML = response.data.name;
                        unlayer.loadDesign(response.data.content.data_json); this.isLoad = !0;
                    }
                }).catch(error => { console.log('error', error); });
        }
        saveTemplate(id,is_show) {
            unlayer.exportHtml( (data) => {
                let _body = { id: id, content_type: 'email', data_html: data.html, data_json: JSON.stringify(data.design) };
                Http.post(`/api/form/${id}/content/update`, { body: _body }).then(response => response.json())
                    .then((response) => {
                        if (is_show) {
                            if (response.status === 200) { swal('Success!', response.message, 'success'); }
                            else { swal('Error!', response.message, 'error'); }
                        }
                        else {
                            if (response.status !== 200) { swal('Error!', response.message, 'error');  }
                        }
                    }).catch(error => { console.log('error', error); });
            })
        }

    }
</script>
