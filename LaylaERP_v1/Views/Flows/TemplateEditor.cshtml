@{
    ViewBag.Title = "TemplateEditor";
    //Layout = "~/Views/Shared/_EditorLayout.cshtml";
    Layout = "~/Views/Shared/_qfk_Layout.cshtml";
    var user = LaylaERP.UTILITIES.CommanUtilities.Provider.GetCurrent();
    LaylaERP.Models.qfk.Flows.ActionMessage o = Newtonsoft.Json.JsonConvert.DeserializeObject<LaylaERP.Models.qfk.Flows.ActionMessage>(LaylaERP.BAL.qfk.FlowsRepository.FlowAdd("get-content", user.login_company_id, ViewBag.id, user.UserID, string.Empty));
}
<style>
    .editorMain {
        display: flex;
    }

        .editorMain #editor-container {
            width: 100%;
        }

            .editorMain #editor-container iframe {
                min-height: calc(100vh - 100px) !important;
            }
</style>
<div class="row border-bottom">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between">
            <div>
                <ol class="breadcrumb m-0 font-size-18">
                    <li class="breadcrumb-item"><a href="/flows/@o.metadata.flow_id/edit">@o.metadata.flow_name</a></li>
                    <li class="breadcrumb-item"><a href="/flows/@o.content_id/content">@o.name</a></li>
                </ol>
            </div>
            <div class="page-title-right">
                <!--<button id="btnSend" type="button" class="btn btn-primary">
                    Send Test
                </button>-->
                <button id="btnSave" type="button" class="btn btn-primary">
                    Save and Return to Flow
                </button>
            </div>
        </div>
    </div>
</div>

<div id="root" class="editorMain">
    <div id="editor-container"></div>
</div>

<div id="modalMail" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">Edit Template Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label class="form-label">Test recipients</label>
                <textarea id="recipients" class="form-control" rows="3" placeholder="email@example.com"></textarea>
                <p>Separate multiple email addresses with commas.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary waves-effect" data-bs-dismiss="modal">Cancel</button>
                <button id="send" type="button" class="btn btn-primary waves-effect waves-light">Send</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div>
@*<script src="//editor.unlayer.com/embed.js"></script>*@
<script src="~/js/qfk/HtmlEditor/embed.js"></script>

<script type="module">
    import Http from '@Url.Content("~/js/http/index.js")';

    var baseURL = window.location.origin, products = GetProduct();
    unlayer.init({
        id: "editor-container", locale: 'en-US', displayMode: "email", projectId: 167,//projectId: 158371,
        appearance: { panels: { tools: { dock: 'left' } } },
        tools: {
            'custom#product_tool': {
                data: { products, },
                properties: { productLibrary: { editor: { data: { products, }, }, }, },
            },
        },
        customCSS: [baseURL + "/js/qfk/HtmlEditor/product-library-tool/productTool.css"],
        customJS: [baseURL + "/js/qfk/HtmlEditor/product-library-tool/productTool.js"],
        mergeTags: {
            organization: { name: 'organization.name', value: '{{ organization.name }}' },
            organization_address: { name: 'organization.full_address', value: '{{ organization.full_address }}', },
            organization_url: { name: 'organization.url', value: '{{ organization.url }}' },
            unsubscribe: { name: 'unsubscribe', value: '{% unsubscribe %}' },
            person_first_name: { name: 'first_name', value: '{{ first_name }}' },
            person_last_name: { name: 'last_name', value: '{{ last_name }}' },
            person_phone_number: { name: 'person.phone_number', value: '{{ person.phone_number }}' },
            person_organization: { name: 'person.organization', value: '{{ person.organization }}' },
            person_title: { name: 'person.title', value: '{{ person.title }}' },
        },
        editor: { confirmOnDelete: true }
    });
    unlayer.addEventListener('design:updated', function (updates) {
            // Design is updated by the user
        unlayer.exportHtml(function (data) {
            let j = { id: @o.content_id, content_type: 'email', data_html: data.html, data_json: JSON.stringify(data.design) };
            Http.post(`/api/flow/message/${j.id}/content-data-update`, { body: j }).then(response => response.json())
                .then((response) => {
                    if (response.status !== 200) { swal('Error!', response.message, 'error'); }
                }).catch(error => { console.log('error', error); });
            })
        });
    document.addEventListener("DOMContentLoaded", function () {
        unlayer.loadDesign(JSON.parse(@Html.Raw(Json.Encode(o.data_json))));

        document.querySelector('#btnSave')?.addEventListener("click", function (evt) {
            evt.preventDefault(), evt.stopPropagation();
            unlayer.exportHtml(function (data) {
                let j = { id: @o.content_id, content_type: 'email', data_html: data.html, data_json: JSON.stringify(data.design) };
                Http.post(`/api/flow/message/${j.id}/content-data-update`, { body: j }).then(response => response.json())
                    .then((response) => {
                        if (response.status === 200) { window.location = window.location.origin + `/flows/${j.id}/content`; }
                        else { swal('Error!', response.message, 'error'); }
                    }).catch(error => { console.log('error', error); });
            });
        });
        document.querySelector('#btnSend')?.addEventListener("click", function (evt) {
            evt.preventDefault(), evt.stopPropagation(), $('#recipients').val(''), $('#modalMail').modal('show');
        });
        document.querySelector('#send')?.addEventListener("click", function (evt) {
            evt.preventDefault(), evt.stopPropagation();
            unlayer.exportHtml(function (data) {
                let j = {
                    name: $('button[data-action="edit"]').data('title'),
                    thumbnail_url: $('#recipients').val(),
                    templates_data: { data_html: data.html }
                };
                if (j.thumbnail_url === '') { swal('Error!', 'Please enter email.', 'error').then(function () { swal.close(); $('#recipients').focus(); }); }
                else {
                    $.post(`/api/email-templates/send/${@o.content_id}`, j).done(function (data) {
                        if (data.status) { $('#modalMail').modal('hide');swal('Success!', 'Test message sent successfully', 'success'); }
                    }).fail(function (jqxhr, settings, ex) { });
                }
            })
        });
    });

    function GetTemplate(id) {
        $.get(`/api/email-templates/template/${id}`).done(function (data) {

            $.each(data, function (index, value) {
                console.log(JSON.parse(value.data_json))
                unlayer.loadDesign(JSON.parse(value.data_json));
            });
        }).fail(function (jqxhr, settings, ex) { });
    }
    function GetProduct() {
        let _ = [];
        $.ajaxSetup({ async:false });
        $.get(`/api/catalog/products`).done(function (data) {
            _ = data;
        }).fail(function (jqxhr, settings, ex) { });
        return _;
    }
</script>


